class CpmwWalletExtentionHandler{constructor(localvalue){this.wrapperclass=".cpmw_loader_wrap",this.confirmMsg=".cpmw_loader_wrap .cpmw_loader>div",this.paymentPrice=localvalue.in_crypto,this.localizeval=localvalue,this.WalletName="",this.WalletObject="",this.WalletLink="",this.networkName="",this.networkId=""}checkOrderStatus(){if("on-hold"==this.localizeval.order_status&&""!=this.localizeval.transaction_id)this.showPassedClass(this.wrapperclass),this.hidePassedClass(this.confirmMsg),this.addUserMessage(this.localizeval.payment_msg),this.addClassForCss("cpmw_payment_sucess");else if(1==this.localizeval.is_paid)this.showPassedClass(this.wrapperclass),this.hidePassedClass(this.confirmMsg),this.addUserMessage(this.localizeval.payment_msg),this.addClassForCss("cpmw_payment_sucess");else if("cancelled"==this.localizeval.order_status){let shop_link="<br><a href="+this.localizeval.shop_page+">Go To Shop</a>";this.showPassedClass(this.wrapperclass),this.hidePassedClass(this.confirmMsg),this.addUserMessage(this.localizeval.rejected_msg+shop_link),this.addClassForCss("cpmw_payment_rejected")}else this.showPassedClass(".cmpw_meta_connect")}async getSelectedWallet(){var wallet_object=window.ethereum;return this.WalletObject=wallet_object,this.WalletObject}isWalletExtentionEnabled(){if(void 0===this.WalletObject||""===this.WalletObject){const el=document.createElement("div");return el.innerHTML="<a href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en' target='_blank'>Click Here </a> to install MetaMask extention",this.displayPopUp(this.localizeval.const_msg.ext_not_detected,"warning",!1,!1,el),!1}return!0}async connectUserAccount(provider,wallet_object){try{this.displayPopUp(this.localizeval.const_msg.connection_establish,!1,!1,!1,!1,!1,!1,!0,!0);const account_list=await provider.send("eth_requestAccounts",[]),accounts=account_list;if(void 0!==accounts[0]){Swal.close();const networkResult=await this.getActiveNetwork(provider,wallet_object);networkResult.id!==this.localizeval.network?(this.displayPopUp(this.localizeval.const_msg.required_network,"warning",!1,!1,!1,"Please Switch Network To "+this.localizeval.network_name,!1,!0,!0),this.changeNetwork(this.localizeval.network,wallet_this)):this.processOrder(provider,wallet_object,accounts)}}catch(err){console.log(err),this.displayPopUp(err.message,"error",2e3)}}async processOrder(provider,wallet_object,accounts){const object=this,activeNetwork=this.getActiveNetwork(provider,wallet_object),networkResult=await activeNetwork;jQuery(".cmpw_meta_wrapper .active-chain p.cpmw_active_chain").html(networkResult.name),jQuery(".cmpw_meta_wrapper .connected-account .account-address").append(accounts),this.hidePassedClass(".cmpw_meta_connect"),this.showPassedClass(".cmpw_meta_wrapper"),networkResult.id!==object.localizeval.network&&(this.displayPopUp(object.localizeval.const_msg.required_network,"warning",!1,!1,!1,"Please Switch Network To "+object.localizeval.network_name,!1,!0,!0),this.changeNetwork(object.localizeval.network,wallet_object)),jQuery(".pay-btn-wrapper button").on("click",(async function(){const networkResult=await activeNetwork;if(networkResult.id!==object.localizeval.network){const result=await object.displayPopUp(object.localizeval.const_msg.required_network,"warning",!1,!1,!1,object.localizeval.const_msg.switch_network+object.localizeval.network_name,!0);result.isConfirmed&&object.changeNetwork(object.localizeval.network,wallet_object)}else object.callMainNetwork(provider,accounts[0],wallet_object)}))}async callMainNetwork(provider,accounts,wallet_object){const payButton=jQuery(".pay-btn-wrapper button");payButton.removeAttr("disabled");const confirm_payment=document.createElement("div");confirm_payment.innerHTML=this.localizeval.in_crypto+this.localizeval.currency_symbol;try{const confirmResult=await this.displayPopUp(this.localizeval.const_msg.confirm_order,"warning",!1,!1,confirm_payment,!1,!0,!1,!1,"Confirm");confirmResult.isConfirmed&&await this.callMainNetworkCurrency(accounts,provider,wallet_object)}catch(error){console.log(error)}}async callMainNetworkCurrency(account,provider){try{this.displayPopUp(this.localizeval.confirm_msg,!1,this.localizeval.url+"/assets/images/metamask.png",!1,!1,!1,!1,!0,!0);const contractAddress=this.localizeval.token_address,defaultCurrencies=["ETH","BNB"];if(defaultCurrencies.includes(this.localizeval.currency_symbol)){const signer=provider.getSigner(),tx={from:account,to:this.localizeval.receiver,value:ethers.utils.parseEther(this.paymentPrice)._hex,gasLimit:ethers.utils.hexlify("0x5208")},response=await signer.sendTransaction(tx);Swal.close();const processMessage=document.createElement("div");processMessage.innerHTML=`<p class="cpmw_transaction_note">${this.localizeval.const_msg.notice_msg}</p>`,Swal.fire({title:this.localizeval.process_msg,imageUrl:this.localizeval.url+"/assets/images/metamask.png",footer:processMessage,didOpen:()=>{Swal.showLoading()},allowOutsideClick:!1});const initialDetails=await provider.getTransaction(response.hash),network=await provider.getNetwork(),dynamicTransactionDetails=await this.getDynamicTransactionData(initialDetails,network.chainId),serverResponse=await this.saveTransactionDetails(dynamicTransactionDetails),receipt=await response.wait(),details=await provider.getTransaction(receipt.transactionHash),confirmData=await this.getDynamicTransactionData(details,network.chainId);this.hidePassedClass(".cmpw_meta_wrapper"),this.showPassedClass(".cpmw_loader_wrap"),this.addUserMessage(this.localizeval.payment_msg),this.addClassForCss("cpmw_payment_sucess"),this.verifyPayment(confirmData,serverResponse)}else await this.processTokenPayments(contractAddress,this.localizeval.receiver,provider)}catch(error){console.log(error),"4001"==error.code||"Rejected by user"==error.error?this.handleRejectedPayment():this.displayPopUp(error.message,!1,this.localizeval.url+"/assets/images/metamask.png",5e3)}}handleRejectedPayment(){const shopLink=`<br><a href="${this.localizeval.shop_page}">Go To Shop</a>`;this.displayPopUp(this.localizeval.rejected_msg,!1,this.localizeval.url+"/assets/images/metamask.png",2e3),this.hidePassedClass(".cmpw_meta_wrapper"),this.addUserMessage(this.localizeval.rejected_msg+shopLink),this.addClassForCss("cpmw_payment_rejected"),this.cancelOrder()}verifyPayment(details,signature){let object=this;const activechain_id="0x"+Number(details.chainId).toString(16),request_data={action:"cpmw_payment_verify",nonce:this.localizeval.nonce,order_id:this.localizeval.id,payment_status:this.localizeval.payment_status,payment_processed:details.hash,selected_network:"0x0"!==activechain_id?activechain_id:this.localizeval.network,sender:details.from,token_address:details.token_address,receiver:details.receiver,amount:details.amount,signature:signature.data.signature};return new Promise((resolve,reject)=>{jQuery.ajax({type:"post",dataType:"json",url:this.localizeval.ajax,data:request_data,success:function(data){Swal.close(),!0===data.is_paid&&(object.hidePassedClass(".cmpw_meta_wrapper"),object.showPassedClass(".cpmw_loader_wrap"),object.addUserMessage(object.localizeval.payment_msg),object.addClassForCss("cpmw_payment_sucess"),object.displayPopUp(object.localizeval.payment_msg,!1,object.localizeval.url+"/assets/images/metamask.png").then(result=>{result.isConfirmed&&(""!==object.localizeval.redirect?window.location.href=object.localizeval.redirect:location.reload())})),resolve(data)},error:function(XMLHttpRequest,textStatus,errorThrown){object.displayPopUp("Error code: "+textStatus,"error",!1,!1,!1,errorThrown),console.log("Status: "+textStatus+" Error: "+errorThrown),reject(errorThrown)}})})}saveTransactionDetails(details){let object=this;const request_data={action:"cpmw_save_transaction",nonce:this.localizeval.nonce,order_id:this.localizeval.id,transaction_id:details.hash,payment_status:this.localizeval.payment_status,sender:details.from,receiver:details.receiver,amount:details.amount,token_address:details.token_address,signature:this.localizeval.signature};return new Promise((resolve,reject)=>{jQuery.ajax({type:"post",dataType:"json",url:this.localizeval.ajax,data:request_data,success:function(data){!1===data.success&&(object.displayPopUp(data.data,"error",2e3),setTimeout((function(){location.reload()}),3500)),!0===data.success&&resolve(data)},error:function(XMLHttpRequest,textStatus,errorThrown){console.log("Status: "+textStatus+" Error: "+errorThrown),reject(errorThrown)}})})}cancelOrder(){let object=this;var request_data={action:"cpmw_cancel_order",nonce:this.localizeval.nonce,order_id:this.localizeval.id};return jQuery.ajax({type:"post",dataType:"json",url:this.localizeval.ajax,data:request_data,success:function(data){if(!1===data.success){let shop_link="<br><a href="+object.localizeval.shop_page+">Go To Shop</a>";object.showPassedClass(".cpmw_loader_wrap"),object.hidePassedClass(".cpmw_loader_wrap.cpmw_loader > div"),object.addUserMessage(object.localizeval.rejected_msg+shop_link),object.addClassForCss("cpmw_payment_rejected"),object.displayPopUp(data.data,"error",2e3),setTimeout((function(){location.reload()}),3500)}},error:function(XMLHttpRequest,textStatus,errorThrown){console.log("Status: "+textStatus+"Error: "+errorThrown)}})}async processTokenPayments(contract_address,to_address,provider){try{if(!contract_address)return;const abi=["function name() view returns (string)","function symbol() view returns (string)","function balanceOf(address _owner) public view returns (uint256 balance)","function transfer(address _to, uint256 _value) public returns (bool success)","function decimals() view returns (uint256)"],signer=provider.getSigner(),userAddress=await signer.getAddress(),contract=new ethers.Contract(contract_address,abi,signer),decimals=await contract.decimals(),amount=ethers.utils.parseUnits(this.paymentPrice,decimals),balance=await contract.balanceOf(userAddress),balanceText=ethers.utils.formatUnits(balance,decimals);if(Number(balanceText)<this.paymentPrice)return this.displayPopUp(`${this.localizeval.const_msg.insufficient_balance} ${balanceText}`,!1,this.localizeval.url+"/assets/images/metamask.png"),this.hidePassedClass(".cpmw_loader_wrap .cpmw_loader>div"),void this.addUserMessage(`${this.localizeval.const_msg.insufficient_balance} ${balanceText}`);const tx=await contract.transfer(to_address,amount),network=await provider.getNetwork();Swal.close();const processMessage=document.createElement("div");processMessage.innerHTML=`<p class="cpmw_transaction_note">${extradata.const_msg.notice_msg}</p>`,Swal.fire({title:extradata.process_msg,imageUrl:this.localizeval.url+"/assets/images/metamask.png",footer:processMessage,didOpen:()=>{Swal.showLoading()},allowOutsideClick:!1});const initialDetails=await provider.getTransaction(tx.hash),contractSentData=await this.getDynamicTransactionData(initialDetails,network.chainId),serverResponse=await this.saveTransactionDetails(contractSentData),receipt=await tx.wait(),details=await provider.getTransaction(receipt.transactionHash),contractConfirmData=await this.getDynamicTransactionData(details,network.chainId);this.verifyPayment(contractConfirmData,serverResponse)}catch(error){console.log(error),"4001"!=error.code&&"Rejected by user"!=error.error||this.handleRejectedPayment();const errorMessage="-32000"==error.code||"-32603"==error.code?extradata.const_msg.insufficient_balance:error.message;this.displayPopUp(errorMessage,"error",!1,!1,!1,error.message)}}async getDynamicTransactionData(details,chainIds){try{if("0x"!==details.data){const iface=new ethers.utils.Interface(["function transfer(address to, uint256 value)"]),parsedData=iface.parseTransaction({data:details.data});if("transfer"===parsedData.name&&2===parsedData.args.length){const sentAmount=parsedData.args[1];return{amount:ethers.utils.formatEther(sentAmount),receiver:parsedData.args[0],hash:details.hash,from:details.from,chainId:chainIds,token_address:details.to}}}return{amount:ethers.utils.formatEther(details.value),receiver:details.to,hash:details.hash,from:details.from,chainId:chainIds,token_address:"0x"!==details.data?details.to:this.localizeval.currency_symbol}}catch(error){return console.log(error),null}}async changeNetwork(chain_id,wallet_object){try{const chain_change=await wallet_object.request({method:"wallet_switchEthereumChain",params:[{chainId:chain_id}]});jQuery(".pay-btn-wrapper button").attr("disabled","disabled"),location.reload()}catch(switchError){if(console.log(switchError),4902===switchError.code)try{await wallet_object.request({method:"wallet_addEthereumChain",params:[JSON.parse(this.localizeval.network_data)]})}catch(addError){console.log(addError),this.displayPopUp(`Error code: ${addError.code}`,"error",!1,!1,!1,addError.message)}else this.displayPopUp(switchError.message,"error")}}async getActiveNetwork(provider,wallet_object){const network=await provider.getNetwork(),activechain_id="0x"+Number(network.chainId).toString(16),active_network=this.localizeval.supported_networks[activechain_id]||network.name;return this.networkName=active_network,this.networkId=activechain_id,{name:active_network,id:activechain_id}}showPassedClass(classnames){jQuery(classnames).show()}hidePassedClass(classnames){jQuery(classnames).hide()}addClassForCss(cssClass){jQuery(".cpmw_loader_wrap .cpmw_loader h2 span").addClass(cssClass)}addUserMessage(message){jQuery(".cpmw_loader_wrap .cpmw_loader h2").html("<span>"+message+"</span>")}displayPopUp(msg,icons=!1,image=!1,time=!1,htmls=!1,text=!1,cancelbtn=!1,showloder=!1,outsideclick=!1,confirmtxt="Ok",endsession=!1){let object;return Swal.close(),Swal.fire({title:msg,text:text,customClass:{container:"cpmw_main_popup_wrap",popup:"cpmw_popup"},icon:icons,html:htmls,showCancelButton:cancelbtn,confirmButtonColor:"#3085d6",confirmButtonText:confirmtxt,reverseButtons:!0,imageUrl:image,timer:time,didOpen:()=>{1==showloder&&Swal.showLoading()},allowOutsideClick:outsideclick})}}const Wallets=new CpmwWalletExtentionHandler(extradata);Wallets.checkOrderStatus(),jQuery(".cmpw_meta_connect .cpmw_connect_btn button").on("click",(async function(){try{if(await Wallets.getSelectedWallet(),Wallets.isWalletExtentionEnabled()){const provider=new ethers.providers.Web3Provider(Wallets.WalletObject),accounts=await provider.listAccounts();0===accounts.length?Wallets.connectUserAccount(provider,Wallets.WalletObject):Wallets.processOrder(provider,Wallets.WalletObject,accounts)}}catch(error){console.error(error)}})),1!=extradata.is_paid&&"cancelled"!=extradata.order_status&&jQuery(".cmpw_meta_connect .cpmw_connect_btn button").trigger("click");